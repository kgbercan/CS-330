head[,c("exPerWeek","min","PA")]
head(h[,c("exPerWeek","min","PA")])
source('~/.active-rstudio-document', echo=TRUE)
write.csv(h,"healthSurveyClean.csv")
hd <- read.csv("hd.csv")
d <- numeric(999)  # initializing d – the vector of differences in means
for (i in 1:999)
{
s <- sample(hd$SBP, 32)
d[i] <- mean(s[1:17]) - mean(s[18:32])
}
l <- tapply(hd$SBP,hd$Smoke,length)
l
v
t <- tapply(hd$SBP,hd$Smoke,mean)
od <- 150.5294 - 137.7333
s <- sample(hd$SBP,32)
s
s1 < - s[1:17]; s2 <- s[18:32]
s1 <- s[1:17]; s2 <- s[18:32]
d <- mean(s1) - mean(s2)
d
d <- numeric(999) # initializing d – the vector of differences in means
for (i in 1:999)
{
s <- sample(hd$SBP, 32)
d[i] <- mean(s[1:17]) - mean(s[18:32])
}
# k is the number of |d| > observed difference
k <- sum(abs(d)> 12.796)
k
pvalue <- (k +1)/1000
pvalue
pnorm(188,24)
?pnorm
pnorm(200,188,24)
1-pnorm(200,188,24)
pnorm(170,188,24)-pnorm(150,188,24)
pnorm(170,188,24)
(150,188,24)
pnorm(150,188,24)
# 1. The cholesterol levels of adult American woman can be described by a Normal distribution with mean 188 mg/dL and a standard deviation of 24 mg/dL.
---
qnorm(.75,188,24)-qnorm(.25,188,24)
qnorm(.75,188,24)
qnorm(.25,188,24)
qnorm(.75,188,24) - qnorm(.25,188,24)
qnorm(.5,188,24)
qnorm(.75,188,24)
qnorm(.25,188,24)
qnorm(.75,188,24) - qnorm(.25,188,24)
qnorm(.85,188,24)
qnorm(.85,188,24)
pt(.05,26)
pt(.95,26)
1-pt(.95,26)
pt(.90,300)
e <- read.csv("exitpoll.csv")
View(e)
exitpoll <- read.csv("exitpoll.csv")
e <- exitpoll[exitpoll$Candidate!="Other"]
e <- exitpoll[,exitpoll$Candidate!="Other"]
e <- exitpoll[,"Candidate"!="Other"]
View(e)
View(exitpoll)
e <- exitpoll[,"Candidate"!="Romney"]
head(e)
exitpoll <- read.csv("exitpoll.csv")
> View(exitpoll)
View(exitpoll)
e <- read.csv("exitpoll.csv")
e <- read.csv("exitpoll.csv")
summary(e)
table(e$Candidate)
cand <- prop.table(cand)
cand <- prop.table(e$Candidate)
cand <- table(e$Candidate)
cand <- prop.table(cand)
cand
cand <- 100*round(prop.table(cand),1)
cand
cand <- 100*round(prop.table(cand),2)
cand
cand <- 100*(round(prop.table(t),2))
t <- table(e$Candidate)
cand <- 100*(round(prop.table(t),2))
cand
cand <- 100*round(p,1)
p <- prop.table(t)
cand <- round(p,1)
cand
p <- round(100*prop.table(t),2)
p
barplot(p)
barplot(p, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll")
barplot(p, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll", col = c("blue","pink"))
barplot(p, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll", col = c("light blue","pink"))
t <- table(e$Candidate)
t <- round(100*prop.table(t),2)
t
barplot(p, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll", col = c("light blue","pink"))
t <- round(100*prop.table(t),2)
t
barplot(t, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll", col = c("light blue","pink"))
table(e$Candidate,e$Sex)
table(e$Sex,e$Candidate)
table(e$Sex ~ e$Candidate)
s <- table(e$Sex, e$Candidate)
s
s <- round(100*prop.table(s),2)
s
addmargnis(s)
addmargins(s)
mosaicplot(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice by Sex of Voter")
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of \nCandidate Choice by Sex of Voter", )
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice by Sex of Voter", )
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", )
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("red","blue"))
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
s <- round(100*prop.table(s),1)
addmargins(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
sex <- table(e$Sex, e$Candidate)
s <- round(100*prop.table(sex),1)
addmargins(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
sex
addmargins(sex)
addmargins(sex,2)
addmargins(sex)
addmargins(sex,1)
addmargins(s,1)
p <- round(prop.table(sex),4)
addmargins(p,1)
addmargins(p)
t <- round(100*prop.table(t,2),2)
t <- round(100*prop.table(t,2),2)
t <- round(100*prop.table(t,1),2)
t
barplot(t, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll", col = c("light blue","pink"))
t <- round(100*prop.table(t),2)
t
barplot(t, xlab = "Candidate", ylab = "Percentage of Votes", main = "Results of Exit Poll", col = c("light blue","pink"))
sex <- table(e$Sex, e$Candidate)
s <- round(100*prop.table(sex,2),1)
addmargins(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
s <- round(100*prop.table(sex),1)
addmargins(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
s <- round(100*prop.table(sex,2),1)
addmargins(s)
sex <- table(e$Sex, e$Candidate)
s <- round(100*prop.table(sex,2),1)
addmargins(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
s <- round(100*prop.table(sex,2),2)
addmargins(s)
mosaicplot(s, xlab = "Voter Sex", ylab = "Candiate", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
0.5625 - 0.4375
addmargins(s)
p <- round(prop.table(sex),4)
addmargins(p)
p <- round(prop.table(sex,2),4)
addmargins(p)
p <- table(e$Sex, e$Candidate)
p <- addmargins(p)
p <- round(prop.table(sex,2),4)
addmargins(p)
addmargins(p,1)
p
p <- addmargins(p,1)
p <- round(prop.table(sex,2),4)
p
p <- addmargins(p,2)
p <- round(prop.table(sex,2),4)
p
p <- prop.table(sex,2)
p
```{r}
p <- table(e$Sex, e$Candidate)
p <- addmargins(p,2)
p <- prop.table(sex,2)
p
addmargins(p)
p <- addmargins(p,1)
p <- prop.table(sex,2)
addmargins(p)
p <- table(e$Sex, e$Candidate)
p <- addmargins(p,2)
p <- prop.table(p,2)
addmargins(p)
p <- prop.table(p,2)
p
sex <- table(e$Candidate, e$Sex)
s <- round(100*prop.table(sex,2),2)
addmargins(s)
s <- round(100*prop.table(sex,2),2)
addmargins(s)
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light blue","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("purple","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light purple","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("light purple","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("red","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("purple","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("lilac","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("lavender","pink"))
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("lavender","pink"))
sex <- table(e$Candidate, e$Sex)
s <- round(100*prop.table(sex,2),2)
addmargins(s)
mosaicplot(s, xlab = "Candiate", ylab = "Voter Sex", main = "Mosaic Plot of Candidate Choice\nby Sex of Voter", col = c("lavender","pink"))
sex
p <- addmargins(sex,2)
p <- prop.table(p,2)
p
0.8256-0.7071
p <- addmargins(sex,2)
p
p <- prop.table(p,2)
p <- addmargins(sex,2)
p <- prop.table(p,2)
p
sum(e$Sex=="Female")
sum(e$Sex="Male")
sum(e$Sex=="Male")
p
.7692*sum(e$Sex=="Female")
p <- prop.table(p,2)
print("Expected Obama supporters who are female: " + .7692*sum(e$Sex=="Female"))
print("Expected Obama supporters who are female: " .7692*sum(e$Sex=="Female"))
.2308*sum(e$Sex=="Female")
.7692*sum(e$Sex=="Female")
.2308*sum(e$Sex=="Female")
.7692*sum(e$Sex=="Male")
.2308*sum(e$Sex=="Male")
.7692*sum(e$Sex=="Female")
.2308*sum(e$Sex=="Female")
.7692*sum(e$Sex=="Male")
.2308*sum(e$Sex=="Male")
**$X^2 = \sum \frac{(O-E)^2}{E}$**
p
p <- addmargins(sex,2)
p
p <- prop.table(p,2)
.7692*sum(e$Sex=="Female")
.2308*sum(e$Sex=="Female")
.7692*sum(e$Sex=="Male")
.2308*sum(e$Sex=="Male")
(((90-83.8428)^2)/83.8428) + (((19-25.1572)^2)/25.1572) + (((70-76.1508)^2)/76.1508) + (((29-22.8492)^2)/22.8492)
print("X^2")
(((90-83.8428)^2)/83.8428) + (((19-25.1572)^2)/25.1572) + (((70-76.1508)^2)/76.1508) + (((29-22.8492)^2)/22.8492)
print("X^2 = ")
(((90-83.8428)^2)/83.8428) + (((19-25.1572)^2)/25.1572) + (((70-76.1508)^2)/76.1508) + (((29-22.8492)^2)/22.8492)
```{r}
(((90-83.8428)^2)/83.8428) + (((19-25.1572)^2)/25.1572) + (((70-76.1508)^2)/76.1508) + (((29-22.8492)^2)/22.8492)
**$X^2 = \sum \frac{(O-E)^2}{E} = 4.111686$**
pchisq(4.11,1)
chisq.test(e$Candidate, e$Sex, correct = F)
pchisq(4.112,1)
chisq.test(e$Candidate, e$Sex, correct = F)
(((90-83.8428)^2)/83.8428) + (((19-25.1572)^2)/25.1572) + (((70-76.1508)^2)/76.1508) + (((29-22.8492)^2)/22.8492)
1-pchisq(4.112,1)
chisq.test(e$Candidate, e$Sex, correct = F)
sex
p <- addmargins(sex,2)
p
p <- prop.table(p,2)
p
getwd()
setwd("/Users/Karina/Documents/CS/330 Languages/R")
load("ProgLang1ex.R")
game <- c(1:5)
gamnum <- c(1:5)
shooter <- c("n","y","n","y","n")
shooter[shooter=="n"] <- FALSE
shooter[shooter=="y"] <- TRUE
die1 <- c(1,4,2,4,1)
die2 <- c(2,6,3,4,6)
finalbet <- rep("NA",5)
finalsum <- die1+die2
result <- c("w","l","l","l","l")
result[result=="w"] <- TRUE
gamedf <- data.frame(game=gamenum,shooter,die1,die2,finalbet,finalsum,yourresult=result)
gamenum <- c(1:5)
#                    for shooter called shooter,
shooter <- c("n","y","n","y","n")
shooter[shooter=="n"] <- FALSE
shooter[shooter=="y"] <- TRUE
#                    for first die called die1,
die1 <- c(1,4,2,4,1)
#                    for second die called die2,
die2 <- c(2,6,3,4,6)
#                    for final bet called finalbet,
finalbet <- rep("NA",5)
#                    for final sum called finalsum,
finalsum <- die1 + die2
#                and for yourresult called result
result <- c("w","l","l","l","l")
result[result=="w"] <- TRUE
result[result=="l"] <- FALSE
# 4.2 Create a dataframe called gamedf using the example as a guide
gamedf <- data.frame(game=gamenum,shooter,die1,die2,finalbet,finalsum,yourresult=result)
View(gamedf)
finalbet <- rep(NA,5)
#                    for final sum called finalsum,
finalsum <- die1 + die2
#                and for yourresult called result
result <- c("w","l","l","l","l")
result[result=="w"] <- TRUE
result[result=="l"] <- FALSE
# 4.2 Create a dataframe called gamedf using the example as a guide
gamedf <- data.frame(game=gamenum,shooter,die1,die2,finalbet,finalsum,yourresult=result)
gamedf
View(gamedf)
gamedf$shooter
gamedf[gamedf$finalsum<8]
gamedf[,][gamedf$finalsum<8]
gamedf[gamedf$finalsum==8]
gamedf[gamedf$finalsum<8]
table(gamedf$yourresult)
prop.table(table(gamedf$yourresult))
100*prop.table(table(gamedf$yourresult))
results <- 100*prop.table(table(gamedf$yourresult))
results[2]
results[2,1]
results[2]
gamedf
game <- list()
GameNum <- gamedf[1,game]
GameNum <- gamedf[1,"game"]
GameNum <- gamedf[1,1]
GameNum
GameNum <- gamedf[1,"game"]
Shooter <- gamedf[1,"shooter"]
Shooter <- TRUE
WinOnOpen <- FALSE
Point <- 10
GameNum <- 1
game$GameNum <- 1
game$GameNum <- 1
# 5.3 Repeat for Shooter, WinOnOpen, and Point.
game$Shooter <- TRUE
game$WinOnOpen <- FALSE
game$Point <- 10
# 5.4 Add a vector element to game called openroll with the values from the log.
##############################
# Intro to R Ex 1
# March 2016
##############################
#---------------------------------------------------------------
# 0.  This is an R file. It ends in .R
# You can run this file using source("ProgLang1ex.R", echo=T)
# You can also install the knitr package with
# install.packages("knitr")
# then make a web page out of this file using the command
# library(knitr)
# spin("ProgLang1ex.R")
#---------------------------------------------------------------
#---------------------------------------------------------------
# 1. Atomic elements
# Create a variable called myroll, and set its value to the value
# you recorded in your log
myroll <- 3
# 1.1 Print the value of myroll
myroll
# 1.2 Is myroll equal (==) to 6?
myroll == 6
# 1.3 Is myroll > 3?
myroll > 3
# 1.4 Is myroll even? (check modulus operator)
myroll%%2 == 0
#---------------------------------------------------------------
#---------------------------------------------------------------
# 2. Vectors
# Create a vector using c() called myrolls of the 5 rolls recorded in your log
myrolls <- c(3,2,6,3,6)
# 2.1 Print this vector
myrolls
# 2.2 What was your 2nd roll?
myrolls[2]
# 2.3 Print the first 3 rolls
myrolls[1:3]
# 2.4 Print the 1st, 3rd, and 4th roll.
myrolls[c(1,3,4)]
# 2.5 Check if each die roll was >3.
myrolls > 3
# 2.6 Only print the rolls >2.
myrolls[myrolls>2]
# 2.7 What was the maximum roll?
max(myrolls)
# 2.8 Tabulate (table) your rolls
table(myrolls)
# 2.9 Did you have any duplicate rolls?
# Hint- you can use functions like duplicated, any, table, and unique
any(duplicated(myrolls))
length(unique(myrolls))
#---------------------------------------------------------------
#---------------------------------------------------------------
# 3.  Matrices
# Create a matrix of the dice rolls from your log using rbind() and c()
# 3.1 Create vectors called roll1, roll2, and roll3 with the 3 dice rolls
roll1 <- c(4,1)
roll2 <- c(1,2)
roll3 <- c(4,4)
# 3.2 Create a matrix called rollmat by rbind()'ing roll1, roll2, and roll3
rollmat <- rbind(roll1, roll2, roll3)
# 3.3 Set the colnames of the matrix to "die1" and "die2"
colnames(rollmat) <- c("die1","die2")
# 3.4 Print the 2nd dice roll (second row)
rollmat[2,]
# 3.5 Print the 1st die roll from the 3rd dice roll (row3, col1)
rollmat[3,1]
# 3.6 Print the second column
rollmat[,2]
# 3.7 Create a new vector called rollsum that is the first column+ the second column
rollsum <- rollmat[,1]+rollmat[,2]
# 3.8 Cbind the new vector to the matrix
rollmat <- cbind(rollmat,rollsum)
# 3.9 Print your matrix
rollmat
#---------------------------------------------------------------
#---------------------------------------------------------------
# 4. Data frame
# Create a data frame of your games table
# 4.1 Create a vector for game called gamenum,
gamenum <- c(1:5)
#                    for shooter called shooter,
shooter <- c("n","y","n","y","n")
shooter[shooter=="n"] <- FALSE
shooter[shooter=="y"] <- TRUE
#                    for first die called die1,
die1 <- c(1,4,2,4,1)
#                    for second die called die2,
die2 <- c(2,6,3,4,6)
#                    for final bet called finalbet,
finalbet <- rep(NA,5)
#                    for final sum called finalsum,
finalsum <- die1 + die2
#                and for yourresult called result
result <- c("w","l","l","l","l")
result[result=="w"] <- TRUE
result[result=="l"] <- FALSE
# 4.2 Create a dataframe called gamedf using the example as a guide
gamedf <- data.frame(game=gamenum,shooter,die1,die2,finalbet,finalsum,yourresult=result)
# 4.3 Print the shooter column using the $
gamedf$shooter
# 4.4 Create a column called firstsum (gamedf$checksum) that is the sum of die1 and die2
# 4.5 Print the subset (using ['s) of the gamedf that is only rows where finalsum<8.
gamedf[gamedf$finalsum<8]
# 4.6 Tabulate the result column. What percentage did you win?
results <- 100*prop.table(table(gamedf$yourresult))
results[2]
# 4.7 Print the data frame
gamedf
#---------------------------------------------------------------
#---------------------------------------------------------------
# 5. List
# Create a list from one of your game records
# 5.1 Create a new list called game
game <- list()
# 5.2 Add an element to game called GameNum with the value of game from your log
game$GameNum <- 1
# 5.3 Repeat for Shooter, WinOnOpen, and Point.
game$Shooter <- TRUE
game$WinOnOpen <- FALSE
game$Point <- 10
# 5.4 Add a vector element to game called openroll with the values from the log.
# 5.5 Construct a data frame called logroll that has the data from your table
# 5.6 Add an element named logroll to your list and set the value as the logroll dataframe
# 5.7 Print the list
# 5.8 use str(game) What do you see?
# 5.9 Print the Point of the game.
# 5.10 Print the 2nd logroll row
# 5.11 Did any roll have the sum of 10?
#---------------------------------------------------------------
#---------------------------------------------------------------
# 6. If there is time
# look at the "useful built in functions" and experiment on how you can use them to ask questions
# about your new data structures. Also, run spin() on this file.
#
#---------------------------------------------------------------
game$openroll <- c(4,6)
gamedf[gamedf$finalsum<8,]
logroll <- data.frame(Roll=c(1,2),Die1=c(3,3),Die2=c(1,4),Tot=Die1+Die2,Bet=rep(NA,2),Win=c(NA,FALSE))
Roll <- c(1,2)
Die1 <- c(3,3)
Die2 <- c(1,4)
Tot <- Die1+Die2
Bet <- rep(NA,2)
Win <- c(NA,FALSE)
logroll <- data.frame(Roll,Die1,Die2,Tot,Bet,Win)
game$logroll <- logroll
game
str(game)
game$Point
game[[logroll]][2,]
game[["logroll"]][2,]
logroll <- game[["logroll"]]
str(logroll)
game[["logroll"]][logroll$Tot==10,]
sum(game[["logroll"]][logroll==10,]
sum(game[["logroll"]][logroll==10,])
sum(game[["logroll"]][logroll==10,])
sum(game[["logroll"]][logroll<10,])
game[["logroll"]][logroll==10,]
game[["logroll"]][logroll==10,]
sum(game[["logroll"]][logroll$Tot==10,])
game[["logroll"]][logroll$Tot==10,]
game$logroll[2,]
any(game$logroll$Tot==10)
